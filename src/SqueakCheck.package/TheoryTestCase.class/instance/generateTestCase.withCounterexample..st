private
generateTestCase: aTheorySelector withCounterexample: anObject
	| description testCase testCaseName popup|
	"More or less 'print out anObject (rejecting all weird characters) and turn it IntoCamelCase'."
	description := (anObject printString withBlanksCondensed subStrings: ' ')
		inject: '' into: [:acc :each | acc , ((each select: #isAlphaNumeric) capitalized)].
	testCaseName := 'test' , aTheorySelector asString allButLast capitalized , 'With' , description.
	
	testCase := testCaseName , Character cr ,
		'	"A test case auto-generated by SqueakCheck."', Character cr ,
		('	self {1} {2}' format: {aTheorySelector. anObject storeString}).
	self class
		compile: testCase
		classified: 'counterexamples'
		notifying: nil.
		
	popup := PluggableSystemWindowWithLabelButton new.
	popup label: (anObject asString).
	popup openInWorld.
	popup extent: 150@75.
	popup topLeft: 50@50.